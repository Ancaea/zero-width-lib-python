{"version":3,"file":"zero-width-lib.js","sources":["../src/zero-width-lib.js"],"sourcesContent":["const zeroWidthNonJoiner = '‌';\nconst zeroWidthJoiner = '‍';\nconst zeroWidthSpace = '​';\nconst zeroWidthNoBreakSpace = '﻿';\nconst leftToRightMark = '‎';\nconst rightToLeftMark = '‏';\n\nexport const zeroWidthDict = {\n\tleftToRightMark,\n\trightToLeftMark,\n\tzeroWidthNonJoiner,\n\tzeroWidthJoiner,\n\tzeroWidthNoBreakSpace,\n\tzeroWidthSpace\n};\n\nconst Quinary2ZeroMap = Object.keys(zeroWidthDict).map(key => zeroWidthDict[key]);\nconst Zero2QuinaryMap = \n\tQuinary2ZeroMap.reduce((acc, cur, index) => {\n\t\tacc[cur] = '' + index;\n\t\treturn acc;\n\t}, {});\n\nexport function t2z(t) {\n\tlet z = '';\n\tfor (let i = 0 ; i < t.length ; i++) {\n\t\tconst base10 = t.codePointAt(i);\n\t\tconst base5 = base10.toString(5);\n\t\tlet zero = '';\n\t\tfor (let j = 0 ; j < base5.length ; j++) {\n\t\t\t// quinary to zero width chars\n\t\t\t// may be able to extend to other base\n\t\t\tzero += Quinary2ZeroMap[+base5.charAt(j)];\n\t\t}\n\t\t// skip low surrogate\n\t\ti = base10 < 0x10000 ? i : i + 1;\n\t\tz += i === t.length - 1 ? zero : zero + zeroWidthSpace;\n\t}\n\treturn z;\n}\n\nexport function z2t(z) {\n\tlet t = '';\n\t// return empty string when input is empty\n\tif (z.length === 0) {\n\t\treturn t;\n\t}\n\tconst chars = z.split(zeroWidthSpace);\n\tfor (let i = 0 ; i < chars.length ; i++) {\n\t\tlet base5 = '';\n\t\tfor (let j = 0 ; j < chars[i].length ; j++) {\n\t\t\tbase5 += Zero2QuinaryMap[chars[i].charAt(j)];\n\t\t}\n\t\tt += String.fromCodePoint(parseInt(base5, 5));\n\t}\n\treturn t;\n}\n\nexport function encode(vis, hid) {\n\tlet e = '';\n\t// convert hidden text to zero width chars\n\tconst hid2z = t2z(hid);\n\t// if visible text is empty\n\t// return zero width chars directly\n\tif (vis.length === 0) {\n\t\treturn hid2z;\n\t}\n\t// otherwise insert zero width chars\n\t// after the first character\n\t// try to prevent user from not copying zero width chars\n\tlet isAdded = false;\n\tfor (const ch of vis) {\n\t\te += ch;\n\t\tif (!isAdded) {\n\t\t\te += hid2z;\n\t\t\tisAdded = true;\n\t\t}\n\t}\n\treturn e;\n}\n\nexport function extract(t) {\n\tlet vis = '';\n\tlet hid = '';\n\tfor (const ch of t) {\n\t\tif (Zero2QuinaryMap[ch]) {\n\t\t\thid += ch;\n\t\t} else {\n\t\t\tvis += ch;\n\t\t}\n\t}\n\treturn {\n\t\tvis,\n\t\thid\n\t}\n}\n\nexport function decode(vis) {\n\t// decode a visible text\n\treturn z2t(extract(vis).hid);\n}\n\nexport function split(t) {\n\t// split text with zero width chars\n\tlet s = '';\n\tfor (const ch of t) {\n\t\ts += ch;\n\t\ts += zeroWidthSpace;\n\t}\n\treturn s;\n}\n"],"names":["const","zeroWidthSpace","zeroWidthDict","Quinary2ZeroMap","Object","keys","map","key","Zero2QuinaryMap","reduce","acc","cur","index","t2z","t","let","z","i","length","base10","codePointAt","base5","toString","zero","j","charAt","z2t","chars","split","String","fromCodePoint","parseInt","extract","vis","hid","ch","e","hid2z","isAdded","s"],"mappings":"AAAAA,IAEMC,EAAiB,IAKVC,mBAHW,oBACA,uBALG,oBACH,0BAEM,wBAU7BD,GAGKE,EAAkBC,OAAOC,KAAKH,GAAeI,aAAIC,UAAOL,EAAcK,KACtEC,EACLL,EAAgBM,gBAAQC,EAAKC,EAAKC,GAEjC,OADAF,EAAIC,GAAO,GAAKC,EACTF,OAGF,SAASG,EAAIC,GAEnB,IADAC,IAAIC,EAAI,GACCC,EAAI,EAAIA,EAAIH,EAAEI,OAASD,IAAK,CAIpC,IAHAjB,IAAMmB,EAASL,EAAEM,YAAYH,GACvBI,EAAQF,EAAOG,SAAS,GAC1BC,EAAO,GACFC,EAAI,EAAIA,EAAIH,EAAMH,OAASM,IAGnCD,GAAQpB,GAAiBkB,EAAMI,OAAOD,IAIvCR,IADAC,EAAIE,EAAS,MAAUF,EAAIA,EAAI,KACpBH,EAAEI,OAAS,EAAIK,EAAOA,EAAOtB,EAEzC,OAAOe,EAGD,SAASU,EAAIV,GACnBD,IAAID,EAAI,GAER,GAAiB,IAAbE,EAAEE,OACL,OAAOJ,EAGR,IADAd,IAAM2B,EAAQX,EAAEY,MAAM3B,GACbgB,EAAI,EAAIA,EAAIU,EAAMT,OAASD,IAAK,CAExC,IADAF,IAAIM,EAAQ,GACHG,EAAI,EAAIA,EAAIG,EAAMV,GAAGC,OAASM,IACtCH,GAASb,EAAgBmB,EAAMV,GAAGQ,OAAOD,IAE1CV,GAAKe,OAAOC,cAAcC,SAASV,EAAO,IAE3C,OAAOP,EA0BD,SAASkB,EAAQlB,GAGvB,IAFAC,IAAIkB,EAAM,GACNC,EAAM,SACOpB,kBAAG,CAAfd,IAAMmC,OACN3B,EAAgB2B,GACnBD,GAAOC,EAEPF,GAAOE,EAGT,WACCF,MACAC,sEAnCK,SAAgBD,EAAKC,GAC3BnB,IAAIqB,EAAI,GAEFC,EAAQxB,EAAIqB,GAGlB,GAAmB,IAAfD,EAAIf,OACP,OAAOmB,EAMR,IADAtB,IAAIuB,GAAU,QACGL,kBAChBG,QACKE,IACJF,GAAKC,EACLC,GAAU,GAGZ,OAAOF,oCAmBD,SAAgBH,GAEtB,OAAOP,EAAIM,EAAQC,GAAKC,oBAGlB,SAAepB,GAGrB,IADAC,IAAIwB,EAAI,SACSzB,kBAChByB,QACAA,GAAKtC,EAEN,OAAOsC"}